// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: items.commands.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (title, description, owner_id)
VALUES ($1, $2, $3)
RETURNING id, title, description, owner_id
`

type CreateItemParams struct {
	Title       string
	Description *string
	OwnerID     uuid.UUID
}

func (q *Queries) CreateItem(ctx context.Context, db DBTX, arg CreateItemParams) (Item, error) {
	row := db.QueryRow(ctx, createItem, arg.Title, arg.Description, arg.OwnerID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OwnerID,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.Exec(ctx, deleteItem, id)
	return err
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET title = $1, description = $2, owner_id = $3
WHERE id = $4
RETURNING id, title, description, owner_id
`

type UpdateItemParams struct {
	Title       string
	Description *string
	OwnerID     uuid.UUID
	ID          uuid.UUID
}

func (q *Queries) UpdateItem(ctx context.Context, db DBTX, arg UpdateItemParams) (Item, error) {
	row := db.QueryRow(ctx, updateItem,
		arg.Title,
		arg.Description,
		arg.OwnerID,
		arg.ID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OwnerID,
	)
	return i, err
}
