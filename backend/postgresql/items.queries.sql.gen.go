// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: items.queries.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const findItem = `-- name: FindItem :one
SELECT id, title, description, owner_id
FROM items WHERE id = $1
`

func (q *Queries) FindItem(ctx context.Context, db DBTX, id uuid.UUID) (Item, error) {
	row := db.QueryRow(ctx, findItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OwnerID,
	)
	return i, err
}

const getAllItems = `-- name: GetAllItems :many
SELECT id, title, description, owner_id
FROM items LIMIT $2 OFFSET $1
`

type GetAllItemsParams struct {
	Offst int32
	Lim   int32
}

func (q *Queries) GetAllItems(ctx context.Context, db DBTX, arg GetAllItemsParams) ([]Item, error) {
	rows, err := db.Query(ctx, getAllItems, arg.Offst, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
